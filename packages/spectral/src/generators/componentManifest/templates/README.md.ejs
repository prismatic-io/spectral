# <%= helpers.capitalizeFirstLetter(component.label) %> Manifest

<%= component.description %>

---

This package contains the Component Manifest for the **<%= component.label %>** Component.

## Usage

### Code Native Integration (CNI) setup

```typescript
import { integration } from "@prismatic-io/spectral";
import <%= component.key %> from "@components/<%= component.key %>-manifest";

import { configPages } from './configPages'
export { configPages } from './configPages'

export const componentRegistry = {
  <%= component.key %>
};


export default integration({
  name: "Integration Name",
  configPages,
  componentRegistry,
  ...
});
```


### Using Actions in the Code Native Integration (CNI) flows

1. Import the Component Manifest package.
2. Include the imported package in the integration method's `components` property.
3. Access the Component's actions through the `context` attribute in the `onExecution` or `onTrigger` method.

**Example:**

```typescript
import { flow } from "@prismatic-io/spectral";

export default flow({
  name: "Flow Name",
  ...
  onExecution: async (context, params) => {
    const { components, logger } = context;

    const response = await components.[component_name].actions.[component_action]({
      [component_action_input]: "123",
      [component_action_input]: "456",
    });

    return Promise.resolve({ data: response });
  },
});
```

### Using Triggers in the Code Native Integration (CNI) flows

1. Import the Component Manifest package.
2. Include the imported package in the flow method's `components` property.
3. Access the Component's actions through the q

**Example:**

```typescript
import { flow } from "@prismatic-io/spectral";

export const myFlow = flow({
  name: "Flow Name",
  ...
  onTrigger: async (context, params) => {
    const { components, logger } = context;

    const response = await components.[component_name].actions.[component_action]({
      [component_action_input]: "123",
      [component_action_input]: "456",
    });

    return Promise.resolve({ data: response });
  },
});
```

### Using Data Sources in the Code Native Integration (CNI) config pages

1. Import the Component Manifest package.
2. Import the specific dataSource you want to use (e.g., `slackDataSource`).

**Example:**

```typescript
import { configPage } from "@prismatic-io/spectral";
import { slackDataSource } from "@components/<%= component.key %>-manifest/dataSources";

export const configPages = {
  "Slack Config": configPage({
    tagline: "Select a Slack channel from a dropdown menu",
    elements: {
      "Select Slack Channel": slackDataSource({
        stableKey: "my-slack-channel-picklist",
        values: {
          connection: { configVar: "my-slack-connection" },
        },
      }),
    },
  }),
};

### Using Connections in the Code Native Integration (CNI) config pages

1. Import the Component Manifest package.
2. Import the specific connection you want to use (e.g., `slackConnection`).

**Example:**

```typescript
import { configPage } from "@prismatic-io/spectral";
import { slackConnection } from "@component/<%= component.key %>-type-manifest/connections";

export const configPages = {
  Connections: configPage({
    tagline: "Authenticate with Slack",
    elements: {
      "Slack Connection": slackConnection({
        stableKey: "my-slack-connection",
        values: {
          username: "my-username",
          password: "my-password",
        },
      }),
    },
  }),
};
```


## Development

There are two modes for this package:

1. **Component Manifest development package:** Use this to test the Component in the Code Native Integration (CNI) locally. Publishing the CNI with this package will fail because the Component doesn't exist on the Prismatic Platform yet. A development package is identified by a `null` `componentSignature` in the `Component Manifest index.ts` file.

2. **Component Manifest production package:** Use this to test the CNI locally and publish it to the Prismatic Platform. A production package is identified by a non-null `componentSignature` generated by running the `prism components:publish` command. This signature is the key for the Component Manifest.

### Installation with a Code Native Integration

**Before publishing the CNI, the local Component package must be published to the Prismatic Platform. This generates a stable signature key for the Component Manifest, indicating it's available for use.**

### Install via remote registry

**For public components:**

```bash
npm install @components/<%= component.key %>-manifest
```

**For private components:**

- If you're installing from a private registry, install the `@components/<%= component.key %>-manifest` however you normally install your packages from your own registry.

**Alternatively, install from a local package or tarball.**

### Link to local package

**Things to keep in mind when using `npm link`:**

- The node versions between the Component Manifest directory and the CNI directory must be the same.

**Steps:**

1. From the new `<%= component.key %>-manifest` directory, create a symlink to the global module directory:

```bash
npm link;
```

2. From the Code Native Integration directory, link the local package:

```bash
npm link @components/<%= component.key %>-manifest;
```

### Install from local tarball package

1. From the new `<%= component.key %>-manifest` directory, create a tarball package:

```bash
npm pack;
```

2. From the Code Native Integration directory, install the tarball package:

```bash
npm install [path to tarball];
```
